<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [

<!--

Process this file with an XSLT processor: `xsltproc \
-''-nonet /usr/share/sgml/docbook/stylesheet/xsl/nwalsh/\
manpages/docbook.xsl manpage.dbk'.  A manual page
<package>.<section> will be generated.  You may view the
manual page with: nroff -man <package>.<section> | less'.  A
typical entry in a Makefile or Makefile.am is:

DB2MAN=/usr/share/sgml/docbook/stylesheet/xsl/nwalsh/\
manpages/docbook.xsl
XP=xsltproc -''-nonet

manpage.1: manpage.dbk
        $(XP) $(DB2MAN) $<
    
The xsltproc binary is found in the xsltproc package.  The
XSL files are in docbook-xsl.  Please remember that if you
create the nroff version in one of the debian/rules file
targets (such as build), you will need to include xsltproc
and docbook-xsl in your Build-Depends control field.

-->

  <!-- Fill in your name for FIRSTNAME and SURNAME. -->
  <!ENTITY dhfirstname "<firstname>Andre</firstname>">
  <!ENTITY dhsurname   "<surname>Herms</surname>">
  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY dhdate      "<date>April 16, 2008</date>">
  <!-- SECTION should be 1-8, maybe w/ subsection other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY dhsection   "<manvolnum>5</manvolnum>">
  <!ENTITY dhemail     "<email>aherms@jeetze.somewhere.de</email>">
  <!ENTITY dhusername  "Andre Herms">
  <!ENTITY dhucpackage "<refentrytitle>AWDS</refentrytitle>">
  <!ENTITY dhpackage   "awds-daemon">

  <!ENTITY debian      "<productname>Debian</productname>">
  <!ENTITY gnu         "<acronym>GNU</acronym>">
  <!ENTITY gpl         "&gnu; <acronym>GPL</acronym>">
]>

<refentry>
  <refentryinfo>
    <address>
      &dhemail;
    </address>
    <copyright>
      <year>2007</year>
      <holder>&dhusername;</holder>
    </copyright>
    &dhdate;
  </refentryinfo>
  <refmeta>
    &dhucpackage;

    &dhsection;
  </refmeta>
  <refnamediv>
    <refname>&dhpackage;</refname>

    <refpurpose>AWDS module for running the process as daemon process</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>daemon.so</command>

      <arg><option>-p <filename>pifile</filename></option></arg>

      <arg><option>options</option></arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para>The awds-daemon module allows us to run the AWDS process as daemon process. This involves 
  forking the AWDS process, detaching from the current terminal, and disabling debug output stdout. 
</para>

    <para>When the <command>awds-shell(5)</command> module has been loaded before, the
       <command>debug</command> command is installed. It allows showing the last debug messages and redirecting
       the output to a file. 
    </para>
  </refsect1>

  <refsect1>
    <title>DEPENDENCIES</title>
    <!-- one of (calloutlist glosslist itemizedlist orderedlist segmentedlist simplelist variablelist caution important note tip warning literallayout programlisting programlistingco screen screenco screenshot synopsis cmdsynopsis funcsynopsis classsynopsis fieldsynopsis constructorsynopsis destructorsynopsis methodsynopsis formalpara para simpara address blockquote graphic graphicco mediaobject mediaobjectco informalequation informalexample informalfigure informaltable equation example figure table msgset procedure sidebar qandaset anchor bridgehead remark highlights abstract authorblurb epigraph indexterm beginpage refsect2) -->
    
    <variablelist>
      <varlistentry>
	<term>shell.so</term>
	<listitem>
	  <!-- one of (beginpage indexterm epigraph authorblurb abstract highlights remark bridgehead anchor qandaset sidebar procedure msgset table figure example equation informaltable informalfigure informalexample informalequation mediaobjectco mediaobject graphicco graphic blockquote address simpara para formalpara methodsynopsis destructorsynopsis constructorsynopsis fieldsynopsis classsynopsis funcsynopsis cmdsynopsis synopsis screenshot screenco screen programlistingco programlisting literallayout warning tip note important caution variablelist simplelist segmentedlist orderedlist itemizedlist glosslist calloutlist) -->
	  <para>The shell modules is optional. If present, the debug command is enabled to control debug output.</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>



  <refsect1>
    <title>OPTIONS</title>

    <para>The following options are supported.</para>

    <variablelist>
      <varlistentry>
        <term>
          <option>-p <filename>filename</filename></option>
          <option>--pidfile <filename>filename</filename></option>
        </term>
        <listitem>
          <para>Use <filename>filename</filename> as file to store the daemons Process ID.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-N</option>
          <option>--nodaemon</option>
        </term>
        <listitem>
          <para>Don't fork and run in background.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-k</option>
          <option>--kill</option>
        </term>
        <listitem>
          <para>Kill an already running AWDS instance. The status code of 0 indicates success. If the status 
code is 1, the AWDS process was already terminated. This feature is used by the <command>stop_awds(5)</command> command.
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-r</option>
          <option>--is-running</option>
        </term>
        <listitem>
          <para>Test if AWDS is still/already active. A status code of 2 indicates that an active
instance exists, otherwise it returns 0.
</para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>

    <para>awds-awdsrouting (5), awds-shell(5), start_awds(8), stop_awds(8).</para>

  </refsect1>
</refentry>

