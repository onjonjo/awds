dnl init autoconf and automake
m4_include([version.m4])
AC_INIT([awds], MAJOR_VERSION_NUMBER.MINOR_VERSION_NUMBER)
AM_INIT_AUTOMAKE(1.7)

dnl we need a c++-compiler:
AC_PROG_CPP
AC_PROG_CXX

dnl we use libtool for libraries

dnl AC_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

AC_ARG_ENABLE(debug, [  --disable-debug          turn off debugging options],
if test "$enableval" != "no" ; then
	CXXFLAGS='-g -ggdb3 -O0 -Wall'
	CFLAGS='-g -ggdb3 -O0 -Wall'
fi)


dnl check for -fvisibility=hidden compile flags
VISFLAG=-fvisibility=hidden

AC_MSG_CHECKING([checking if compiler support $VISFLAG])
AC_LANG_PUSH(C++)
previs_cxxflags=$CXXFLAGS
CXXFLAGS="$CXXFLAGS $VISFLAG"
AC_COMPILE_IFELSE([int a;], AC_MSG_RESULT(yes),[ VISFLAG=""; AC_MSG_RESULT(no)])
CXXFLAGS=$previs_cxxflags
AC_LANG_POP(C++)

AC_SUBST(VISFLAG)

dnl check for GEA library

dnl default values:
GEAINC="-I/usr/include"
GEALIB="-L/usr/lib -lgea3-posix"
GEALIBDIR="/usr/lib"

AC_MSG_CHECKING(for GEA)
AC_ARG_WITH(gea,
[  --with-gea=DIR	  use GEA in DIR],
[ case "$withval" in
  yes|no)
	AC_MSG_RESULT(no)
	;;
  *)
	if test -f $withval/include/gea/API.h -a -f $withval/lib/libgea3-posix.so; then
          AC_MSG_RESULT(from $withval)
	  GEAINC="-I$withval/include"
	  GEALIB="-L$withval/lib -lgea3-posix"
	  GEALIBDIR="$withval/lib"
	else
	  AC_ERROR(gea/API.h or libgea3-posix.la not found in $withval)
	fi
	;;
  esac ],
[ if  test -f ${prefix}/include/gea/API.h -a -f ${prefix}/lib/libgea3-posix.so; then
	GEAINC="-I${prefix}/include"
	GEALIB="-L${prefix}/lib -lgea3-posix"
	GEALIBDIR="${prefix}/lib"
	AC_MSG_RESULT(found in $prefix)
  elif  test -f /usr/include/gea/API.h -a -f /usr/lib/libgea3-posix.so; then
	GEAINC="-I/usr/include"
	GEALIB="-L/usr/lib -lgea3-posix"
	GEALIBDIR="/usr/lib"
	AC_MSG_RESULT(found in /usr)
  else
	AC_MSG_RESULT(no)
	AC_ERROR(GEA not found)
  fi] )

AC_SUBST(GEAINC)
AC_SUBST(GEALIB)
AC_SUBST(GEALIBDIR)

AC_ARG_ENABLE(mmx,
[  --enable-mmx    Turn on MMX accelerated AES implementation],
[case "${enableval}" in
    yes)
	AC_CHECK_TOOL(NASM, nasm, AC_MSG_ERROR(Cannot find assembler nasm required for mmx support.) )
	aes_mmx=true
	;;
    no)  aes_mmx=false ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmx) ;;
esac],[aes_mmx=false])
AM_CONDITIONAL(AES_MMX, test x$aes_mmx = xtrue)

AC_CHECK_PROGS(DB2MAN, docbook2man, notfound)
AC_CHECK_PROGS(XSLTPROC, xsltproc, notfound)


DOCBOOKXSL="not found"

XSL_CANDIDATES="/usr/share/xml/docbook/stylesheet/nwalsh/manpages/docbook.xsl \
	/usr/share/xml/docbook/stylesheet/manpages/docbook.xsl \
	/usr/share/docbook/stylesheet/xml/manpages/docbook.xsl"


AC_MSG_CHECKING(DockBook XSL stylesheet file for manpages)
AC_ARG_WITH(manpagexsl,
[  --with-manpagexsl=file	  use file as docbook xsl stylesheet],
[ case "$withval" in
	yes|no)
		AC_MSG_RESULT(no)
		;;
	*)
		DOCBOOCXSL="$withval"
		AC_MSG_RESULT($DOCBOOKXSL)
esac],[
	for i in $XSL_CANDIDATES; do
		test -f $i && DOCBOOKXSL="$i"
	done
	AC_MSG_RESULT($DOCBOOKXSL)
])
AC_SUBST(DOCBOOKXSL)

AM_CONDITIONAL(CREATE_MANPAGE, test "$DB2MAN" != "notfound")
AM_CONDITIONAL(CREATE_MODDOCS, test "$XSLTPROC" != "notfound" -a "$DOCBOOKXSL" != "not found")



AC_CONFIG_FILES([Makefile
 src/Makefile
 src/crypto/Makefile
 scripts/Makefile
 doc/Makefile
])
AC_OUTPUT
