#! /bin/sh
### BEGIN INIT INFO
# Provides:          awds
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start the AWDS daemon
# Description:       This script is used to start the AWDS daemon which provides
#		     a layer 2 mesh routing. It will create a virtual network devive
#                    awds0. Settings can be customized in /etc/awds.conf.
### END INIT INFO

# Author: Andre Herms <aherms@ivs.cs.uni-magdeburg.de>
# Do NOT "set -e"

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="AWDS wireless mesh routing"
NAME=awds
DAEMON=/usr/sbin/start_awds
DAEMON_ARGS=""
PIDFILE=/var/run/awds.pid
SCRIPTNAME=/etc/init.d/$NAME
CONFFILE=/etc/awds.conf

/bin/touch /tmp/aa

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r $CONFFILE ] && . $CONFFILE

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{

        # Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
    
    $DAEMON  && return 0
    RETVAL="$?"
    
    # The return code 2 of AWDS means it was already running
    [ "$RETVAL" = 2 ] && return 1
    
    # otherwise there was some error  
    return 2
    
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
    [ -r $PIDFILE ] || return 1
    /usr/sbin/stop_awds || return 2
	# Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return 0
}


do_hotplug() 
{

    [ "$START_BY_UDEV" != 1 ] || return 0

    if [ "$ACTION-$SUBSYSTEM-$INTERFACE" = "add-net-$NET_DEV" ]; then
	do_start    
    fi

    if [ "$ACTION-$SUBSYSTEM-$INTERFACE" = "remove-net-$NET_DEV" ]; then
	do_stop
    fi

}


case "$1" in
    start)

    if [ $START_AWDS_ON_BOOT != 1 ]; then
	[ "$VERBOSE" != no ] && log_daemon_msg "start of AWDS disabled in" "$CONFFILE"; log_end_msg 0
	exit 0;
    fi
    
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
	0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
    stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
	0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
    hotplug)
	do_hotplug > /dev/null
	touch /tmp/fnord	
    ;;
    reload|restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
        log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1)
	    do_start
	    case "$?" in
		0) log_end_msg 0 ;;
		1) log_end_msg 1 ;; # Old process is still running
		*) log_end_msg 1 ;; # Failed to start
	esac
	;;
    *)
	  	# Failed to stop
	log_end_msg 1
	;;
    esac
    ;;
    *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
